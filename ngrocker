#!/bin/bash

ENV_FILE='.env'
BIN_PATH=$(cd ~ && pwd)/bin/
ORIGINAL_SCRIPT=$(pwd)/ngrocker.sh
SYMBOLIC_SCRIPT=$BIN_PATH/ngrocker

NGROK_NETWORK_NAME=ngrok-client
NGROK_NETWORK_DNS=
NGROK_INSPECTOR_PORT=4040

DEFAULT_TARGET_PORT=80

DEFAULT_TUNNEL_ADDRESS=localhost
DEFAULT_TUNNEL_PORT=80

C_GREEN='\033[32m'
C_YELLOW='\033[33m'
C_RED='\033[31m'
C_CYAN='\033[36m'
C_NULL='\033[0m'

function println
{
	local COLOR=$1
	local TEXT=${@:2}
	echo -e "${COLOR}${TEXT}${C_NULL}"
}

function set-env {
    sed -i "s|$1=[^\n]*|$1=$2|g" $ENV_FILE
}

function ascii-art {
    echo -e "${C_CYAN}
                                            __
         _____    ___________  ____   ____ |  | __ ___________ 
        /     \  / ___\_  __ \/  _ \_/ ___\|  |/ // __ \_  __ \\
        |   |  \/ /_/  >  | \(  <_> )  \___|    <|  ___/|  | \/
        |___|  /\___  /|__|   \____/ \___  >__|_ \\\\\\\\___  >__|   
            \ / /____/                   \/     \/    \/    ${C_NULL}";
echo
}

function configure-help {
    ascii-art
    echo -e ""
	echo -e "${C_YELLOW}Usage: ${C_NULL}"
    echo -e "  ngrocker [-c address | -h address] [-t address] [-n network] [-i port] | [-l]"
    echo
	echo -e "${C_YELLOW}Options: ${C_NULL}"
	echo -e "   ${C_GREEN}-c ${C_YELLOW}address[:port]${C_NULL}\t Sets the target container name."
    echo -e "   ${C_GREEN}-h ${C_YELLOW}address[:port]${C_NULL}\t Sets the target address."
    echo -e "   ${C_GREEN}-t ${C_YELLOW}address[:port]${C_NULL}\t (Optional) Sets the tunnel address."
    echo -e "   ${C_GREEN}-n ${C_YELLOW}network${C_NULL}\t\t (Optional) Sets the network name used by containers."
    echo -e "   ${C_GREEN}-i ${C_YELLOW}port${C_NULL}\t\t (Optional) Sets the inspector port."
    echo -e "   ${C_GREEN}-l ${C_NULL}\t\t\t (Optional) Sets the ngrocker command from any location."
    echo
    echo -e "${C_YELLOW}Examples: ${C_NULL}"
    echo -e "   ${C_GREEN}ngrocker -l${C_NULL}\t\t\t Create shortcut of the ngrocker on your system."
    echo -e "   ${C_GREEN}ngrocker -c golang${C_NULL}\t\t Create a tunnel of the golang container into http://localhost/."
    echo -e "   ${C_GREEN}ngrocker -h localhost:8080${C_NULL}\t Create a tunnel of the address into http://localhost/."
    echo
    exit -1
}

function get-ip {
    host $1 | awk '/has address/ { print $4 }'
}

function config-host {
    ip=$(get-ip $1)
    [ ! $ip ] && ip=$1
    set-env "NGROK_TARGET_ADDRESS" $ip:$2
}

function config-container {
    docker network create $NGROK_NETWORK_NAME
    docker network connect $NGROK_NETWORK_NAME $1
    set-env "NGROK_TARGET_ADDRESS" "$1:$2"
    set-env "NGROK_NETWORK_NAME" $NGROK_NETWORK_NAME
}

function config-tunnel {
    set-env "NGROK_TUNNEL_ADDRESS" $1
    set-env "NGROK_HTTP_PORT" $2
    set-env "NGROK_INSPECTOR_PORT" $NGROK_INSPECTOR_PORT
}

function clear-network {
    set-env "NGROK_NETWORK_DNS" ""
    set-env "NGROK_NETWORK_NAME" ""
}

function create-link {
    local script_path=$(pwd)
    mkdir -p $BIN_PATH
    rm -f $SYMBOLIC_SCRIPT
    echo "cd ${script_path} && ./ngrocker \$*" > $SYMBOLIC_SCRIPT
    chmod +x $SYMBOLIC_SCRIPT
    echo
    println $C_CYAN "Now you can type $C_YELLOW ngrocker $C_CYAN from anywhere."
    println $C_GREEN "If you change the path of this script, please execute this command again."
    echo
    exit 1
}

function check-docker-compose {
    if ! which docker-compose > /dev/null; then
        sudo curl -o /usr/local/bin/docker-compose -L "https://github.com/docker/compose/releases/download/1.15.0/docker-compose-$(uname -s)-$(uname -m)"
        sudo chmod +x /usr/local/bin/docker-compose
    fi
}

function main {
    [ $# = 0 ] && configure-help

    local IS_CONTAINER=false
    local IS_HOST=false

    local NGROK_TUNNEL_ADDRESS=$DEFAULT_TUNNEL_ADDRESS
    local NGROK_TUNNEL_PORT=80

    local NGROK_TARGET_ADDRESS=false
    local NGROK_TARGET_PORT=80

    while getopts c:h:t:n:d:i:s:l OPTION; do
		case $OPTION in
			c) 
                IS_CONTAINER=true
                local TARGET_URL=(${OPTARG//:/\ } $DEFAULT_TARGET_PORT)
                NGROK_TARGET_ADDRESS=${TARGET_URL[0]}
                NGROK_TARGET_PORT=${TARGET_URL[1]}
                ;;
            h) 
                IS_HOST=true
                local TARGET_URL=(${OPTARG//:/\ } $DEFAULT_TARGET_PORT)
                NGROK_TARGET_ADDRESS=${TARGET_URL[0]}
                NGROK_TARGET_PORT=${TARGET_URL[1]}
                ;;
            t)
                local TUNNEL_URL=(${OPTARG//:/\ } $DEFAULT_TUNNEL_PORT)
                NGROK_TUNNEL_ADDRESS=${TUNNEL_URL[0]}
                NGROK_TUNNEL_PORT=${TUNNEL_URL[1]}
                ;;
            n)
                NGROK_NETWORK_NAME=$OPTARG
                ;;
            d)
                NGROK_NETWORK_DNS=$OPTARG
                ;;
            i)
                NGROK_INSPECTOR_PORT=$OPTARG
                ;;
            s)
                check-docker-compose
                docker-compose down; exit 0
                ;;
            l) 
                check-docker-compose
                create-link
                ;;
            *) configure-help
		esac
	done

    [ ! -f .env ] && cp env-example .env
    clear-network

    $IS_CONTAINER && config-container $NGROK_TARGET_ADDRESS $NGROK_TARGET_PORT    
    $IS_HOST      && config-host      $NGROK_TARGET_ADDRESS $NGROK_TARGET_PORT

    config-tunnel $NGROK_TUNNEL_ADDRESS $NGROK_TUNNEL_PORT

    check-docker-compose
    docker-compose up -d
    
    echo
    echo
    println $C_YELLOW "Tunnel Address:"
    println $C_GREEN "\thttp://$NGROK_TUNNEL_ADDRESS:$NGROK_TUNNEL_PORT/"
    echo
    println $C_YELLOW "Inspector Address:"
    println $C_GREEN "\thttp://$NGROK_TUNNEL_ADDRESS:$NGROK_INSPECTOR_PORT/"
    echo
    echo
}

main $*
